from model.base import MLP, CirConv1dfrom model.gnn import GNN, MyGATfrom torch import nnimport torchimport torch.nn.functional as Ffrom utils.general import prodfrom utils.torch_extension import my_bn#from torch.nn.modules import BatchNorm1dimport mathimport numpyimport config as cfgimport timefrom torch.autograd import Variablefrom itertools import chain, combinations, permutationsclass QuadConv(nn.Module):    """Four-layer fully-connected ELU net with batch norm."""    def __init__(self, dim_in, dim_out, kernel=cfg.context_emb_kers, pad=cfg.context_emb_pad, do_prob=0.):        super(QuadConv, self).__init__()        #self.kernel = kernel        #self.padding = pad        self.conv1 = nn.Conv2d(dim_in, dim_out, kernel, padding=pad)        self.conv2 = nn.Conv2d(dim_out, dim_out, kernel, padding=pad)        self.conv3 = nn.Conv2d(dim_out, dim_out, kernel, padding=pad)        self.conv4 = nn.Conv2d(dim_out, dim_out, kernel, padding=pad)        self.bn1 = nn.BatchNorm2d(dim_out)        self.bn2 = nn.BatchNorm2d(dim_out)        self.bn3 = nn.BatchNorm2d(dim_out)        #self.bn4 = nn.BatchNorm2d(dim_out)        self.pool1 = nn.MaxPool2d(kernel)        self.pool2 = nn.MaxPool2d(kernel)    def forward(self, inputs):        """        :param inputs: The whole scene image  [batch_size, dim_in, height, weight]        :return: context_node(hidden)  [batch_size, dim_out(context_hidden)]        """        x = F.relu(self.conv1(inputs))        x = self.bn1(x)        x = F.relu(self.conv2(x))        x = self.bn2(x)        x = self.pool1(x)        x = F.relu(self.conv3(inputs))        x = self.bn3(x)        x = F.relu(self.conv4(x))        #x = self.bn2(x)        x = self.pool2(x)        return xclass context_embedding(nn.Module):    """ construct context-node"""    def __init__(self, dim_in, dim_out):        super(context_embedding, self).__init__()        self.conv = QuadConv(dim_in, dim_out)    def forward(self, context_input):        context_hidden = self.conv(context_input)        context_hidden = context_hidden.mean(dim=-1).mean(dim=-1)        return context_hidden
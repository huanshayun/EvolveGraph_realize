from torch import nnfrom torch.nn.functional import one_hotfrom utils.torch_extension import gumbel_softmax, sample_gumbel_maximport config as cfgfrom model.base import MLP, MyMLPfrom itertools import permutationsimport torchfrom utils.torch_extension import symimport mathimport torch.nn.functional as Fclass EvolveGraph(nn.Module):    def __init__(self, encoder, decoder, context_emb):        super(EvolveGraph, self).__init__()        self.enc = encoder        self.dec = decoder        self.ct_emb = context_emb    def context_embedding(self, context_input):        context_hidden = self.ct_emb(context_input)        return context_hidden    def infer_relations(self, inputs, category, context_hidden, graph_hidden1, graph_hidden2, pattern):        logits, graph_hidden1, graph_hidden2 = self.enc(inputs, category, context_hidden,                                                        graph_hidden1, graph_hidden2, pattern)        edges = F.gumbel_softmax(logits, tau=cfg.temp, hard=False)  # sample        prob = logits.softmax(-1)        return edges, prob, graph_hidden1, graph_hidden2    def predict_states(self, inputs, edges, context_hidden, group_index, gru_hidden1=None, gru_hidden2=None, burn_in_flag=True):        predict_result = self.dec(inputs, edges, context_hidden, group_index, gru_hidden1, gru_hidden2,                                  burn_in_flag=burn_in_flag)        return predict_result    def forward(self, inputs, category, context_hidden, graph_hidden1, graph_hidden2, pattern,                group_index, gru_hidden1=None, gru_hidden2=None, burn_in_flag=True):        edges, prob, graph_hidden1, graph_hidden2 = self.infer_relations(inputs, category, context_hidden,                                                                         graph_hidden1, graph_hidden2, pattern)        output, gru_hidden1, gru_hidden2 = self.predict_states(inputs, edges, context_hidden, group_index, gru_hidden1,                                                               gru_hidden2, burn_in_flag)        return edges, prob, graph_hidden1, graph_hidden2, output, gru_hidden1, gru_hidden2